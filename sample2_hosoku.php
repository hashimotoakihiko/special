2-1' PHPの基礎2(補足)
2-1'-1 条件分岐「switch文」

    特定の変数や値を比較し、処理を実行します。
    if文で記述すると冗長的になるような比較はswitch文を利用することで、簡潔に記述できます。

    基本構文
    比較は上から順番に実行されていき、最初にマッチした処理を実行します。
    switch文が行う比較は緩やかなもの( == )であることに注意しましょう。
    //=================コード====================
    switch(値) {
    case 比較する値1 :
    # 処理
    break;
    case 比較する値2(caseは1つでも良い、いくつでも設定できる) :
    # 処理
    break;
    default デフォルトの処理(どの比較にもマッチしなければ、ここの処理が実行される) :
    # 処理
    break;
    }
    //=================コード====================
    break; を記述しないことにより、マッチした以降の処理を実行することもできますが、バグの原因と
    なるため、
    複数の条件を設定する目的以外では、必ず case: ごとに break; を記述する様にしましょう。

    //=================コード====================
    $number = 20;
    switch($number) {
    # 比較する値1
    case 10:
    echo '10です';
    # break;を記述しないと、比較が合致した以降から、
    # 次にbreak;が記述された処理までが実行されます。
    break;
    # 比較する値は1つでも、複数でも設定することができます
    case 20:
    echo '20です';
    break;
    # デフォルトの処理, どの比較にもマッチしなければ、ここの処理が実行されます
    default :
    echo '10でも20でもありません';
    break; 
    }
    # 出力結果)
    # 20です
    //=================コード====================

    //=================コード====================
    $number = 20;
    switch($number % 3) {
    case 1:
    '3で割ると1余る数字です';
    break;
    case 2:
    '3で割ると2余る数字です';
    break;
    # パターン数が決まっている場合、最後の一つ、defaultに処理を入れてしまって良い
    default :
    '3の倍数です';
    break;
    }
    # 出力結果)
    # 3で割ると2余る数字です
    //=================コード====================

    次のように、複数の条件を設定することもできます。
    //=================コード====================
    $number = 20;
    switch($number)
    {
    # $numberが5か10の場合
    case 5:
    case 10:
    echo "5か10です";
    break;
    # $numberが15か20の場合
    case 15:
    case 20:
    echo "15か20です";
    break;
    default:
    echo "それ以外の数字です";
    break;
    }
    # 出力結果)
    # 15か20です
    //=================コード====================


2-1'-3 繰り返し処理
while文

    while文はwhile()のカッコ内に記述した条件がtrueな値である限りループします。
    //=================コード====================
    $number = 1;
    $upper = 5;
    # 5回ループして1 2 3 ...と出力し、$numberが5になったタイミングで処理を終了する
    while($number < $upper) {
    echo $number . ' ';
    $number ++;
    }
    //=================コード====================
    while文で一度も実行されない例です。
    () 内が true でなければ、一度も実行されません。
    //=================コード====================
    $number = 5;
    $upper = 5;
    # $numberが5未満ではないため、1度もループしません
    while($number < $upper) {
    echo $number . ' ';
    $number ++;
    }
    //=================コード====================
    while文での無限ループの例です。
    次の例では引数が true のため、終了条件を設定しない限り無限にループしてしまいますね。
    適当な条件を設定するなり、 break; を記述す流などすれば、終了したいタイミングにループを終了す
    ることができます。
    //=================コード====================
    # 条件は常にtrueなのでbreak;など使わない限りループは終了しません
    while(true) {
    # 処理
    }
    $number 4;
    $upper = 5;
    // $numberが$upper以上になることがないため、無限ループになります
    while($number < $upper) {
    echo $number + " ";
    $number --;
    }
    //=================コード====================

    do-while文
    //=================コード====================
    基本的にはwhile文同様の条件ですが、while文とは異なり1度括弧内の処理を実行してから条件を確認し、
    ループするかどうかの判断を行なっています。実行(do)してからループ条件が正しい間(while)ループすると
    覚えましょう。
    //=================コード====================
    $number = 5;
    $upper = 5;
    # $numberが5未満ではないが、1度必ず実行されます
    do {
    echo $number . ' ';
    $number ++;
    } while($number < $upper);
    //=================コード====================


