/* /* CSS

5 - CSS
5-1 CSSの基礎

    CSSはHTMLで書かれた要素にスタイルを当てるために使用すると説明しました。 実際に下記、divタグに
    対してスタイルを定義するにはHTMLファイルに下記の style タグを用意しましょう。

    //HTML
    //=================コード====================
    <div class="sample">
    あああああ
    </div>
    //=================コード====================

    //CSS
    //=================コード====================
    /* <style>
    .sample{
    color:red;
    backgroud-color:gray;
    }
    </style> */
    //=================コード====================

    //出力結果
    あああああ

    5-1-1 CSSの組み込み方
    CSSの組み込み方は3種類あります。
    styleタグを使用する
    linkタグでCSSファイルを読み込む
    style属性で直接HTMLの要素に書き込む
    上の例はstyleタグを使用しています。例ではclassという属性を用いてますが後ほど説明します。
    linkタグは前回のHTMLの研修の際に登場しましたがCSSファイルを別途用意し、そのファイル名を指定し
    ます。
    <link rel="styleseet" href="test.css">
    style属性で直接書き込むのはある意味一番わかりやすく、前述の例を書き換えると
    //=================コード====================
    <div class="sample" style="color:white;background:grey;padding:10px;">
    あああああ
    </div>
    //=================コード====================
    となります。
    ただ見てわかるとおり、HTMLが長くなってしまいます。HTMLとCSSを修正する際にもわかりにくくなっ
    てしまいます。一つずつの要素しかスタイルを当てることができないというデメリットもありますので特
    別な理由がない限り、このCSSの当て方はやめましょう。

    5-1-2セレクタ
    直接HTMLにstyleを指定しない場合、それではどのようにして対象のHTMLを指定するのでしょうか。
    CSSではセレクタと呼び、いろいろな指定の仕方が存在します。
    要素での指定
    /* div {
    color:red;
    } */
    これは div タグに対して文字の色を赤にするというCSSです。
    divタグが複数ある場合全てを指定することになります。他のタグも同様です。
    ※特に全ての要素を対象とする場合は * を使います。これはユニバーサルセレクタと呼ばれています、

    id,class属性
    前回のHTMLの研修では触れませんでしたが全てのHTML要素にはid属性、class属性を定義することがで
    き、 これらを使ってCSSを指定することが多くあります。
    id は同じid名の要素は同じHTMLページに1つのみ使用されることが前提です。HTMLでは誤った記述が
    あった場合でもエラーとなり表示がされないということはありませんが同じid名が複数あった場合、意図
    したスタイルが当たらないということもありますので注意が必要です。
    class は同じ名前を複数の要素でつけることが可能です。最初は1つに当てるつもりのスタイルが後から
    複数になるということもありますのでCSSのセレクタは特別なことがない限り id での指定ではな
    く class での指定とするようにしましょう。
    //=================コード====================
    /* <style>
    .sample_1{
    color:white;
    }
    #sample_2{
    color:red;
    }
    </style>
    <div class="sample_1">
    あああああ
    </div>
    <div id="sample_2">
    いいいいい */
    /* </div> */
    //=================コード====================
    classの指定は . (ドット)、idの指定は # シャープ　を使用します。


    //結合子
    これらを組み合わせて指定することも可能です。組み合わせる際に使う結合子には4種類あります。
    結合子 対象
    セレクタ① セレクタ
    ② セレクタ①はセレクタ②の親要素である 結合子はスペース
    セレクタ① > セレク
    タ② セレクタ①はセレクタ②の直近の親要素である スペースは孫も含めている
    セレクタ①+セレクタ
    ②
    セレクタ①はセレクタ②と兄弟で直後
    (共通の親要素を持ちセレクタ①の直後にセレクタ②がくる)
    セレクタ①～セレクタ
    ②
    セレクタ①はセレクタ②と兄弟で後にくる
    (共通の親要素を持ちセレクタ①の後にセレクタ②がくる、直後じゃなくて
    もよい)
    div .test {cssスタイル}
    とするとdivを親に持つtestクラスを持った要素
    div > span {cssスタイル}
    とするとdivの子供のspan要素にさらに組み合わせて
    div .test > span{cssスタイル}
    とするとdivを親に持つtestクラスの子供のspanとなる。

    //セレクタを繋げる
    結合子を使わず dev.test と繋げて書いた場合は
    <div class="test"></div>
    というようにdivでありtestクラスが当たっている要素となります。
    その他にも擬似要素といって「要素の直後に」や「最初に登場する要素に」、さらには「偶数番目に」な
    どの指定ができますが応用となりますので慣れて来たら調べて見ましょう。

    //優先度
    それでは以下のCSSを用意した場合はどうなるでしょうか？
    /* <style>
    .sample_1{
    color:white;
    }
    #sample_2{
    color:red;
    }
    </style>
    <div class="sample_1" id="sample_2">
    あああああ
    </div> */

    同じ color という文字の色を変えるスタイルを定義しておりますが、 この場合、 #sample_2 の指定
    が適用されます。
    classの指定よりidの指定の方が強いためです。
    またそれよりもstyle属性で直接HTMLに書き込んだものが優先されます。これも想像はつきやすいでしょ
    う。わざわざ直接指定しているのですから。
    前述したようにセレクタは複雑にすることができ、最終的な優先度の決め方は計算で求めることになりま
    す。

    セレクタ 詳細度
    style="" 1000
    # (id) 100
    . (class) 10
    タグ 1
    /* body > #test.sample span {
    color:red; 
    } */

    こちらは
    タグの body , span で「2」たす
    classの　 .sample の「10」たす
    idの　 #test で「100」たすで「112」となります。
    このような計算が裏でなされ実際にあてるべきスタイルが表示されています。
    同じ数字だった場合はCSSは基本上書きになりますので後から定義されている方がスタイルとして反映さ
    れます。
    この優先度を一切無視するのがimportantです。
    /* span {
    color:blue !imporant; 
    } */
    というように使用します。この場合はいくら span で「1」だろうとこちらが優先されます。
    ただこの指定の仕方は管理が大変になるので、多用するべきではありません。通常、整理されたCSSの指
    定の仕方をしていれば important を使わないといけない場合はほとんどありません。まずは使わずに
    済む方法を考えましょ


5-2 スタイルについて
5-2-1 ボックスのスタイル

ブロック要素に対して当てはめるスタイルです。

//ブロック要素に対して当てはめるスタイルです。
//width heigth
まずは幅と高さが指定できます。
※指定の仕方は　 10px とピクセル指定や 10% というパーセント指定が代表的です。
width 幅
height　高さ
これはさらに
max-width
min-width
max-height
min-height
というように最小と最大の値を別途指定することも可能です。
これによりその要素のcontent領域を指定します。

content領域は一番内側のエリアとなります。

borderがボックス領域の境目になりますが、
contentとborderの間にpaddingがあります。
さらにborderの外側にmarginがあります。
この領域の考え方がなかなかわかりにくいのですが、あるブロック要素を用意したとしてその要素の中に
文字が存在したとします。ブロック要素全体の背景色を変えたとして、content,paddingの領域まで色が変
わりますが、文字はcontentの領域にしか存在できません。
また境界線はborderであり、この境界線のスタイルは別途指定することが可能です。
さらにこのブロック要素の下に別のブロック要素があるとしてその要素間の伱間はmarginを使って指定で
きます。
//=================コード====================
/* <style>
 div{
 text-align:center;
 background-color:red;
 border:2px black;
 width:100px;
 height:20px;
 margin:10px;
 padding:20px;
 }
 .blue{
 background-color:blue;
 }
</style>
<div>
あああ
</div>
<div class="blue">
いいい
</div> */
//=================コード====================

//margin padding
どの部分の伱間を担当するのかわかったと思いますが、この2つはいくつかの書き方のテクニックがありま
す。
margin-top
margin-left
margin-right
margin-bottom

と個別に方向をしてすることができます。さらに
指定方向
margin:10px 全方向
margin: 10px 20px 上下　左右
margin: 10px 20px 30px 上　左右　下
margin: 10px 20px 30px 40px 上　右　下　左　(上から時計周り)
という指定が可能です。これらはpaddingでも同様です。
左だけの指定をしたい場合は
padding-left:10px; で指定したほうが padding: 0 0 0 10px; とするよりすっきりするでしょ
う。 逆もしかりです。

//border
境界線のスタイルを指定できますが、
border: スタイル　太さ　色
という形で指定します。

border:solid 6px black;

スタイルは
none 非表示
solid 実線
dotted 点線
などがあります。
色の指定は文字のスタイルと合わせて説明しますが、

 border-color:black;

とこれらは個別に指定することも可能です。

//background
背景を指定することができますが、こちらもいろんな要素があります。 borderと同じように1つにまとめて
指定できますが、
background: 背景画像のURL 表示位置/表示サイズ　スタイル　固定対象　基点　背景色
と長くなります。
こちらも個別で
background-color: black;
と指定することも可能です。
プロパティを列挙すると以下となります。

プロパティ 指定内容 値の例
background-image 背景画像のURL text.png
/* background-position 表示位置 0px 0px */
background-size 表示サイズ 100px 50px
background-repeat 表示スタイル no-repeat
background-attachment 固定対象 fixed
background-origin 基点 content-box
background-clip 表示エリア border-box
background-color 背景色 black


5-2-2 文字のスタイル

//color
文字の色の指定となります。
ここでは一度CSSの色の指定の仕方をまとめます。 これまで出てきた色の指定の仕方は
color:red;のように色を英語表記で表しておりました。かなりの数の色は英語表記に対応しており
olivedrabのような色も指定できます。
/* 16進数で黒の #000000 から白の #ffffff までを当てはめた書き方 */
RGBで黒の rgb(0,0,0); から白の rgb(255,255,255) までを当てはめた書き方
またRGBは rgb(0,0,0,0.2) とすると透明度まで指定することができます。
※以前はrgbでしか透明度の指定ができませんでしたが,16進数の書き方に2桁追加して透明度を指定できる
ようになりました。

//font
font: 斜体　字形　太さ　大きさ/行高さ　フォント
となりますが、こちらも
font-family:serif
などと個別に指定可能です。

//text-align
行揃えの指定です。
center 真ん中
left　左
right　右
よく勘違いするのがブロック要素の中のブロック要素を中央合わせにしようとしてしまうことです。
text-alignはインライン要素に対して効果があるものなのでブロック要素で中央合わせにする場合は
margin:0 auto; としてmarginを使うなどしましょう。


5-2-3 位置の指定
HTMLはそのまま配置すると上から順に下に配置されていきます。その伱間などは margin で調整したり
しますが、要素を重ね合わせたりしたい時などは要素の位置自体の調整が必要です。
少々コツがいるので説明します。

//position
位置に操作を加えたい場合、その要素の position を変更します。
position でよく使うのは3つです。
relative 通常の表示位置を基点
absolute　親要素を基点
fixed　ブラウザ画面を基点
というように基点がどこかの指定です。
absolute の親要素はデフォルトで「0px 0px」のページの左上となりますが、 position がデフォ
ルトの static 以外の指定がなされた要素の中に設置した場合はその要素が親要素となります。
absolute を指定したいブロック要素の親要素に position:relative としておくことが通例です。
位置の指定はわかりやすく
top
bottom
right
left
で指定します。

//z-index
こうやってブロック要素を重ねていくと、重なり順を操作したいときがでてきます。
そういった場合はz-indexで位置を変えます。
z-index:100;
数字が大きい方が上となります。
z-index で何も考えないで一番上にしたいからといって大きい数字を当ててしまうと あとからさらに大
きい数字を当てなければならなくなりますのできちんとルールを決めて指定しましょう。
またそもそもHTMLは書いた順に重なっていくものですので z-index を操作する前にHTMLとして書く
順番を工夫できないかを検討したほうがよいです。


5-2-4 CSSの応用
CSSは様々な指定が可能で覚えきれません。
今回紹介していないものをあげても角を丸くするborder-radius
動きをつけるanimation
ボックスの回り込みfloat
ボックスの影をつけるbox-shadow
などなど、まだ多くのCSSがあります。
使いながら覚えていくことが一番ですので、知らないものが出てきたら一つずつ調べる癖をつけるように
しましょう  