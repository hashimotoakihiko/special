1-4-6 四則演算と剰余算、文字連結

  //四則演算
  # 加算 ... 足し算
  $addition = 3 + 3; # 6
  # 減算 ... 引き算
  $subtract = 3 - 3; # 0
  # 乗算 ... 掛け算
  $multiplication = 3 * 3; # 9
  # 除算 ... 割り算
  $division = 3 / 3; # 1
  # 剰余算 ... あまり算
  $residueCalculation = 3 % 3; # 

  //計算結果再代入
  $number1 = 5;
  $number1 += 10;
  $number1 -= 10;
  $number1 *= 10;
  $number1 /= 10;
  $number1 %= 10;

  $number2 = 10;

  $number2 = $number2 + 10;
  $number2 = $number2 - 10;
  $number2 = $number2 / 10;
  $number2 = $number2 * 10;
  $number2 = $number2 % 10

  //インクリメントとデクリメント
  //四則演算の中でも、1加算する、1減算する、という処理は非常に高い頻度で利用するため、インクリメント・デクリメントと言われる演算子が存在しています。それぞれ前置、後置することで処理のタイミングを変更することができます
  $a = 5;
  # 前置インクリメント
  ++$a; # 6になる
  # 後置インクリメント
  $a++; # 7になる
  # 前置デクリメント
  --$a; # 6になる
  # 後置デクリメン
  $a--; # 5になる

  //出力などを行う際、後置インクリメントは出力後に加算されます。意図しないタイミングで実行される可能性があるため、注意点として覚えておきましょう
  $b = 5;
  echo ++$b; # 6が出力される
  echo $b++; # 出力が先に実行されるので、加算前に6が出力される
  echo $b; # 7が出力される

  # 出力結果)

  /*
  6
  6
  7
  */

  //文字連結
  //PHPでは文字連結を行う際, . (ドット演算子)を利用します。
  $a = "僕は";
  $b = "カレーが";
  $c = "好きです";

  echo $a . $b . $c;
  # 出力結果)

  /*
  僕はカレーが好きです
  */

  //文字連結も計算結果同様に連結結果を代入することができます。
  $a = "僕、";
  $a .= "サッカーで";
  $a .= "優勝したよ\n";

  echo $a;
  $b = "カレー";
  $b .= "ライスは";
  $b .= "飲み物";
  echo $b;

  # 出力結果)
  /*
  僕、サッカーで優勝したよ
  カレーライスは飲み物
  */

  //文字連結を行う際に計算することもできますが、計算する場合は括弧 () で括りましょう。
  //括らなかった場合、 僕は1997年生まれの2017 - 1997 となります。
  //PHPでは計算のため文字列を数字に変換しますが、そのまま数字に変換できない値は変換を行うと 0 になるため、計算結果は -1997 になり、最後に 歳 が連結され、 -1997歳です となることに注意しましょう。

  $a = "僕は";
  $b = 1997;
  $c = "年生まれの";
  $e = 2017;
  $d = "歳です";
  echo $a . $b . $c . ($e - $b) . $d;
  # 出力結果) 僕は1997年生まれの20歳です
  echo $a . $b . $c . $e - $b . $d;
  # 出力結果) -1997歳で

//1-4-7 比較演算子と論理演算子
    //比較演算子
    # この値を比較していきます。
    $example = 5;
    # 等しいかどうか
    $example == 5; # true
    # 型も含めて等しいかどうか
    $example === 5; # true
    $example === '5'; # false
    # 等しくないか
    $example != 10; # true
    $example != '5'; # false
    # 型も含めて等しくないか
    $example !== 10; # true
    $example !== 5; # false
    $example !== '5'; # true
    # $exampleが10より小さいか
    $example < 5; # false
    # $exampleが10以下か
    $example <= 5; # true
    # $exampleが5より大きいか
    $example > 5; # false
    # $exampleが5以上か
    $example >= 5; # true
    # boolean型の比較は予期しない動きをする場合もあるので注意しましょう。
    $boolValue = false;
    var_dump($boolValue > true); # false
    var_dump($boolValue <= false); # true
    var_dump($boolValue < 1); # true

    //論理演算子
    //比較は、複数の条件を使って行うことができます。(〇〇且つ△△、〇〇または△△、など) andとorは基本的に使わないこと(変数代入時にわかりづらいため)
    $example1 = 5;
    $example2 = 4;
    # 論理積 ... 1つ目がTRUE且つ、2つ目がTRUEかどうか
    $example1 >= 5 && ($example1 + $example2) >= 10; # false
    $example1 >= 5 and ($example1 + $example2) > 7; # true
    # 論理和 ... 1つ目がTRUEまたは、2つ目がTRUEかどうか
    $example1 >= 5 || $example2 >= 10; # true
    $example1 < 5 or $example2 === 4; # true
    $example1 < 5 or $example2 >= 10; # false
    # 否定 ... 指定した値が、TRUE出ない場合に、TRUE
    $example3 = false;
    !$example3; # true
    $example4 = true;
    !$example4; # false

    # andは代入時に想定外の動きをします(括弧でくくると想定通り)
    $a = 1;
    # 先に条件として通る、$a === 1が代入されてしまいます
    $b = $a === 1 and $a === 2;
    # trueになります。
    var_dump($b);
    # orは代入時に想定外の動きをします(括弧でくくると想定通り)
    $c = 1;
    # 先に条件として通る、$c === 1が代入されてしまいます
    $d = $c === 2 or $c === 1;
    # falseになります
    var_dump($d);


//1-4-8 条件分岐 「if文」
    //プログラミングでは特定の条件に合った時のみ、特定の処理をしたい場合があります。PHPではif文を利用することで、特定の条件下での処理を実行することができます。
    //基本構文
    //条件の部分はboolean型の値として、true または falseで判断され、trueだった場合にif文内の処理が実行されます。

    //if(条件)
    {
      # 処理
    }
    //$a > 4 は true な値のため、 if 内の処理が実行されます。
    
    $a = 5;
    if($a > 4)
    {
      echo '$aは4より大きい数字です';
    }
    ?>

    //複数条件
    //条件はelseや、else if を利用することで、複数条件記述することができます。
    # 年齢を示す変数
    $age = 20;
    if($age >= 20)
    {
      echo '成人です';
    }
    else
    {
      echo '未成年です';
    }
    
    //else if は続けざまに幾つでも記述することができます。ただし、 if は一番最初に、 else は一番最後にそれぞれ一つしかかけないということを覚えておきましょう。
    
    $a = 5;
    # ifは一つしか書けません
    if($a < 5)
    {
      echo '5未満です';
    }
    else if($a === 5)
    {
      echo '5です';
    }
    else if($a === 10)
    {
      echo '10です';
    }
    
    # elseは一つしか書けません
    else
    {
      echo '10より大きい数字です';
    }
    
    //次の例のような場合、aは5以下であり、5でもありますが先に条件を通った、 a <= 5 の条件が trueになるため、 a === 5 の条件は通らないことに注意しましょう。
    $a = 5;
    if($a <= 5)
    {
      echo '5以下です';
    }
    # この条件を通ることはありません
    else if($a === 5)
    {
      echo '5です';
    }
    else
    {
      echo '5より大きい数字です';
    }
    
    
    //どちらの条件にも合致しないと、いずれも出力されない場合もあります。
    # 年齢を示す変数
    $age = 20;
    if($age >= 65)
    {
      echo '65以上です';
    }
    else if($age >= 45 && $age <= 64)
    {
      echo '45以上64以下です';
    }
    
    //1. 変数名はわかり易い名前にしましょう。また、キャメルケース(例: $myName )や、スネークケース
    (例: $my_name )などの記述方法もある。役割で使い分けてください。(研修資料では基本的にキャメ
    ルケースを使用)
      ↩
    //2. echo の他に、 print() , print_r() などの関数がありますが、研修では echo のみ利用し
    て行きます。 ↩
    
    //3. var_dump() 関数はデバッグ(確認)用の関数です。実際の業務ではどのような値が格納されている
    か確認する場合にのみ利用します。 



