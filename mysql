9 - MySQL基礎2
9-1 集計関数とデータのグループ化
9-1-1 集計関数

    前回のテーブルを多少修正した以下のテーブルとデータがあるとします。

    ID name age section
    1 山田 22 営業部
    2 佐藤 30 人事部
    3 田中 28 営業部
    4 山本 26 営業部
    5 岩本 29 人事部

    所属部署を追加しています。このデータ全件に対して
    年齢の合計、平均、最小値,最大値を知りたい場合、
    以下のSQLを実行すると下のデータが取得できます。
    //=================コード====================
    SELECT
    SUM(`age`) AS `合計`
    , AVG(`age`) AS `平均`
    , MIN(`age`) AS `最小値`
    , MAX(`age`) AS `最大値`
    FROM
    `user`
    ;
    //=================コード====================

    合計 平均 最小値 最大値
    135     27 	    22 	30
    となります。

    またデータ登録された人の人数を知りたい場合は
    //=================コード====================
    SELECT
    COUNT(`id`) AS `人数`
    FROM
    `user`
    ;
    //=================コード====================
    とすると
    人数
    5
    となります。

    AS句
    別名をつけることができます。
    集計関数と合わせて使わなくとも通常のSELECT文にも使用できます。
    SELECTした後の表示結果をもっとわかりやすくしたいという時に使用できます。

    SUM、AVG、MIN、MAX
    代表的な集計関数となります。
    対象となるカラムを対象に合計、平均、最小値、最大値をそれぞれ集計します。

    COUNT
    データの件数を取得します。
    COUNT(name) としてもここでは結果的に同じ値となりますがもし name がNULLを許可していて
    nameがNULLのデータがあった場合はNULLのデータはカウントされません。

    ☆☆☆☆☆☆☆☆☆☆演習☆☆☆☆☆☆☆☆☆☆
    もし営業部の人だけで集計したい場合は、どのようなSELECT文となるか考えて見ましょう。
    ☆☆☆☆☆☆☆☆☆☆演習☆☆☆☆☆☆☆☆☆☆

    9-1-2 グループ化(GROUP BY)
    演習で営業部だけの集計を行なったが、部ごとの集計を毎回WHERE句を変えたSELECT文を作っていくの
    は不便でしょう。MySQLにはグループ化してグループごとの集計処理を行う仕組みがあります。
    //=================コード====================
    SELECT
    COUNT(`id`) AS `人数`
    ,`section` AS `部署`
    FROM
    `user`
    GROUP BY
    `section`
    ;
    //=================コード====================
    GROUP BY の後はグループにする基準のカラムとなります。
    COUNT などの集計関数はグループ毎の集計となります。
    どの部署の人数かわからなくなるので部署の表示も追加しました。
    人数 部署
    2 　　人事部
    3 　　営業部

    9-1-3 集計関数の注意点
    上記の部署ごとにグループ化したSELECT文でさらに人数が3人以上の部署を抽出しようと思って
    下記SQLを実行するとエラーとなります。
    //=================コード====================
    SELECT
    COUNT(`id`) AS `人数`
    ,`section` AS `部署`
    FROM
    `user`
    WHERE
    COUNT(`id`) >= 3
    GROUP BY
    `section`
    ;
    
    /* エラーになります*/
    //=================コード====================
    WHERE句を処理する段階ではまだ集計関数の処理が行われないためです。
    SQLの処理には順序があり、
    ・元の全件データ
    ・WHERE句での絞り込み
    ・グループ化
    ・集計処理
    の順で実行されます。
    この集計処理に絞り込みを行う場合は HAVING を使います。

    HAVING
    集計結果に対してさらに絞り込みを行うことができます。
    さきほどエラーになったSQLを直すと下記となります。
    //=================コード====================
    SELECT
    COUNT(`id`) AS `人数`
    ,`section` AS `部署`
    FROM
    `user`
    GROUP BY
    `section`
    HAVING
    COUNT(`id`) >= 3
    ;
    //=================コード====================
    WHERE と混同してしまいやすいですが、順序を理解すると使い分けが簡単です。


9-2 結合

２つ以上のテーブルに関連性を持たせた場合、
それらを結合させてまるで一つのテーブルかのように表示させることができます。
先ほどから扱っている user テーブルですが、いまは部署の種類が人事部と営業部だけですが
扱う部署が増えていったら毎回文字を入力させていくのが大変です。
またなんの部署があるのかの部署を管理するテーブルも欲しくなることが予想されますし、
部署の名前が変わった時、 user テーブルのデータを毎回修正していく必要があります。
こういった問題を解決するため、このようなデータはテーブルを2つに分けて管理することがあります。

    userテーブル
    id name age section_id
    1 山田 	22 	1
    2 佐藤 	30 	2
    3 田中 	28 	1
    4 山本 	26 	1
    5 岩本 	29 	2

    sectionテーブル
    id name
    1 営業部
    2 人事部

    [ section テーブルの id ]と[ user テーブルの section_id ]が紐づいていることがわかります。
    これだとデータの登録や部署の管理は少し楽になりそうですが、２つのテーブルを見比べないといけなく
    なり、わかりにくくもなりました。
    これらはテーブルを結合すればもとの一つのテーブルと同じ見せ方にできます。

    9-2-1 JOIN
    上記2つのテーブルをわかりやすいデータとして取得するSQLは下記になります。
    ID 名前 部署
    1　 山田 　営業部
    2 　佐藤 　人事部
    3 　田中 　営業部
    4 　山本 　営業部
    5 　岩本 　人事部
    //=================コード====================
    SELECT
    `user`.`id` AS `ID`
    ,`user`.`name` AS `名前`
    ,`section`.`name` AS `部署`
    FROM
    `user`
    JOIN `section`
    ON `user`.`section_id` = `section`.`id`
    ;
    //=================コード====================
    例
    //=================コード====================
    SELECT
    [表示用のカラム]
    FROM
    [メインのテーブル]
    JOIN [サブのテーブル]
    ON [両テーブルの結合条件]
    ;
    //=================コード====================
    となります。

    結合条件とは「このテーブルのこのカラムはこのテーブルのこのカラムのことだよ」と
    示すこととも言えますね。
    テーブル名 . カラム名 とドットで繋げています。２つのテーブルの中で１つしかないカラム名の場合は
    カラム名 とだけにして省略することもできますが、
    例えば id や name は両方のテーブルに出てくるのでどちらのテーブルかわかりません。
    そのため必ずテーブル名から指定する必要があります。

    AS句で省略
    テーブルの指定が省略できないとそれはそれでSQLが長くなって不便です。
    今は user といった短い名前のテーブルですが長いテーブル名の場合AS句を使ってニックネームをつけ
    てあげることが可能です。
    //=================コード====================
    SELECT
    `u`.`id` AS `ID`
    , `u`.`name` AS `名前`
    , `s`.`name` AS `部署`
    FROM
    `user` AS `u`
    JOIN `section` AS `s`
    ON `u`.`section_id` = `s`.`id`
    //=================コード====================
    AS句は前述のSQLでも出てきていましたがテーブル名に足しても使用できます。

    9-2-2 LEFT JOIN
    id name age section_id
    1 山田 　22 	1
    2 佐藤 　30 	2
    3 田中 　28 	1
    4 山本 　26 	1
    5 岩本 　29 	NULL

    user テーブルの岩本さんの selection_id が何かのデータ作成時の不備か部署に属さないことにな
    ったなどの理由で NULL となっていたとします。
    先ほどのSELECT文を実行すると岩本さんが消えてしまいます。

    これは JOIN が紐づいているデータを取得するもので紐づかないデータは除外してしまうためです。
    岩本さんのデータも取得する必要がある場合は LEFT JOIN を利用します。 LEFT JOIN は左外部結合
    ともいいます。
    //=================コード====================
    SELECT
    `u`.`id` AS `ID`
    , `u`.`name` AS `名前`
    , `s`.`name` AS `部署`
    FROM
    `user` AS `u`
    LEFT JOIN `section` AS `s`
    ON `u`.`section_id` = `s`.`id`;
    //=================コード====================
    FROMで定義したメインのテーブルを左、サブのLEFT JOINの後に記述したテーブルを右として、
    どちら前提で結合するかを決めることができます。紐づいていない情報はNULLとしてでも表示させていま
    す。
    ※今回は section_id を NULL としたので NULL になったわけではないです。
    もし岩本さんの section_id を存在しない 100 などの値にした場合でも同様な表示になります。

    9-2-3 RIGHT JOIN
    左もあれば右もあります。

    id name
    1 営業部
    2 人事部
    3 経理部
    と経理部を追加しました。
    //=================コード====================
    SELECT
    `u`.`id` AS `ID`
    , `u`.`name` AS `名前`
    , `s`.`name` AS `部署`
    FROM
    `user` AS `u`
    RIGHT JOIN `section` AS `s`
    ON `u`.`section_id` = `s`.`id`;
    //=================コード====================

    とすると
    ID 名前 部署
    1 山田 営業部
    2 佐藤 人事部
    3 田中 営業部
    4 山本 営業部
    NULL NULL 経理部

    となります。
    あまり使い道はないかもしれないですね。
    ただ user で section に紐づいていない岩本さんは消えて
    経理部 がID、名前が NULL として表示されました。
    結合の仕方は他にもありますが、まずはこの基本の結合の仕方を押さえましょう。
