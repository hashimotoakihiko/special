//JavaScript6 非同期通信

//非同期通信
//非同期とは

//通常・同期通信
//「進む」ボタン、「戻る」ボタンなど、リンクを利用した通信を行う際、
//画面の遷移とサーバー側の処理、画面表示をひとまとめに行う。

//非同期通信
//画面遷移を挟まず、直接サーバー側と通信し、結果を取得すること。

//非同期通信実装
XMLHttpRequest //オブジェクトを利用、設定。



//XMLHttpRequest オブジェクトの生成
変数 = new XMLHttpRequest();

let xhr = new XMLHttpRequest();


//通信の設定
//通信を行うためにHTTPメソッド種類・通信場所・受け取り方
変数.open("HTTPメソッド名","通信したいパス");
変数.responseType = "形式";

//openにはgetやpostを指定し、通信したいURLやファイル名にアクセス。
//responseTypeにはファイル設定、json形式でやりとりが多い。
//=================コード====================
// localhost/sampleに対してGET通信を行う設定をする
xhr.open("get", "localhost/sample");
// 形式はJSONに設定する
xhr.responseType = "json";
//=================コード====================

//=================コード====================
// {
// "name":"hanako",
// "age": 24
// }
//=================コード====================
 { key: value } //の形で構成されているデータ形式。


//リクエストの送信
    //send メソッドを利⽤してリクエストを送信することができます。
    //open メソッドで設定したHTTPメソッドで指定のパスにリクエスト行う。
    変数.send();
    

//基本的な流れとしては open → send となるため順番に注意しましょう。
    //=================コード====================
    xhr.open("get", "localhost/sample");
    xhr.responseType = "json";
    // リクエストの送信を実行する
    xhr.send();
    //=================コード====================


//通信結果の受信
    //onload プロパティに対して処理を設定することで、通信が成功して結果を受け取った後の動きを制御することができます。
    //無名関数として振る舞いを登録しておくのが⼀般的で、 this.response を利用することで受信した
    //通信結果を表⽰したり、処理に利⽤したりが可能です。
    //=================コード====================
    変数.onload = function() {
    処理内容
    };
    //=================コード====================

    //リクエストを送信し、返ってきたレスポンスを確認する場合は以下のようになります。
    //=================コード====================
    xhr.onload = function() {
    console.log(this.response);
    };
    //=================コード====================


//まとめ
    //非同期通信の性質上、通信→受信の順で処理を行い、通信が完了してから処理が行われるため
    //他のプログラムとの実⾏順序が⼊れ替わることがある点には注意しましょう。
    //ポイント1. 非同期通信( Ajax )は画⾯遷移なしで、直接サーバと通信する
    //ポイント2. Ajaxによるレスポンスは動的な画⾯変更に利用する
    //ポイント3. Ajaxは XMLHttpRequest オブジェクトを利用する


//流れ
    //=================コード====================
    // XMLHttpRequestオブジェクトの生成
    let xhr = new XMLHttpRequest();
    // 各種設定
    xhr.open("GET", "http://localhost/sample.json");
    xhr.responseType = "json";
    // 通信後の処理
    xhr.onload = function(){
    // 通信後に受け取った結果を表示します
    console.log(this.response["text"]);
    }
    // リクエストの送信
    xhr.send();
    //=================コード====================
